1.装饰者模式是为了增强：即它会在解耦原有实现的基础上再次增加一个自己的方法，然后实现更多功能
装饰者模式整体思路是这样的：
1.首先定义一个接口，然后这个接口会有两个具体的实现类和一个抽象的实现类
2.抽象的实现类里和代理模式类似，都定义好一个接口对应的属性，然后实现1中接口的方法其实是属性实现的方法
3.现在再建一个具体的实现类继承1中的抽象类，重写1中接口的方法，然后在方法前后可以做对应的修饰，构成了装饰作用。
因为2里其实已经决定是调用哪个具体实现，所有无论2中具体传的是哪个具体实现参数，只要调用接口对应的方法都会执行修饰用的方法
4.使用的时候，对应的抽象装饰器要使用，并且